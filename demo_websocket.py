#!/usr/bin/env python3
"""
Demo script para demonstrar a funcionalidade WebSocket do InteceptProxy

Este script simula o uso b√°sico do WebSocketHistory para demonstrar
como as conex√µes e mensagens s√£o rastreadas.
"""
import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from core.websocket_history import WebSocketHistory
import time


def demo_websocket_history():
    """Demonstra o uso do WebSocketHistory"""
    print("=" * 70)
    print("Demo: WebSocket Support no InteceptProxy")
    print("=" * 70)
    print()

    # Cria inst√¢ncia do hist√≥rico
    ws_history = WebSocketHistory()
    print("‚úì WebSocketHistory inicializado")
    print()

    # Simula primeira conex√£o WebSocket
    print("üì° Simulando conex√£o WebSocket 1...")
    flow_id_1 = "websocket_flow_12345"
    ws_history.add_connection(
        flow_id_1, 
        "wss://example.com/chat", 
        "example.com"
    )
    print(f"   ‚úì Conex√£o estabelecida: wss://example.com/chat")
    
    # Simula troca de mensagens
    print("\nüí¨ Simulando troca de mensagens...")
    ws_history.add_message(flow_id_1, b"Hello Server!", from_client=True)
    print("   ‚Üí Cliente: 'Hello Server!'")
    time.sleep(0.1)
    
    ws_history.add_message(flow_id_1, b"Hello Client! Welcome to the chat.", from_client=False)
    print("   ‚Üê Servidor: 'Hello Client! Welcome to the chat.'")
    time.sleep(0.1)
    
    ws_history.add_message(flow_id_1, b"Thanks! How are you?", from_client=True)
    print("   ‚Üí Cliente: 'Thanks! How are you?'")
    time.sleep(0.1)
    
    ws_history.add_message(flow_id_1, b"I'm doing great!", from_client=False)
    print("   ‚Üê Servidor: 'I'm doing great!'")
    
    # Simula segunda conex√£o WebSocket (bin√°ria)
    print("\nüì° Simulando conex√£o WebSocket 2 (dados bin√°rios)...")
    flow_id_2 = "websocket_flow_67890"
    ws_history.add_connection(
        flow_id_2,
        "wss://api.example.com/stream",
        "api.example.com"
    )
    print(f"   ‚úì Conex√£o estabelecida: wss://api.example.com/stream")
    
    # Simula mensagem bin√°ria
    print("\nüì¶ Simulando mensagem bin√°ria...")
    binary_data = b"\x00\x01\x02\x03\xff\xfe\xfd"
    ws_history.add_message(flow_id_2, binary_data, from_client=True)
    print(f"   ‚Üí Cliente: {binary_data.hex()} (bin√°rio, {len(binary_data)} bytes)")
    
    # Mostra estat√≠sticas
    print("\n" + "=" * 70)
    print("üìä Estat√≠sticas das Conex√µes")
    print("=" * 70)
    
    connections = ws_history.get_connections()
    print(f"\nTotal de conex√µes: {len(connections)}\n")
    
    for conn in connections:
        print(f"Conex√£o #{conn['id']}:")
        print(f"  - URL: {conn['url']}")
        print(f"  - Host: {conn['host']}")
        print(f"  - Status: {conn['status']}")
        print(f"  - Mensagens: {conn['message_count']}")
        print(f"  - In√≠cio: {conn['start_time'].strftime('%H:%M:%S')}")
        print()
    
    # Mostra detalhes das mensagens da primeira conex√£o
    print("=" * 70)
    print(f"üí¨ Mensagens da Conex√£o #1 ({flow_id_1})")
    print("=" * 70)
    print()
    
    messages = ws_history.get_messages(flow_id_1)
    for i, msg in enumerate(messages, 1):
        direction = "Cliente ‚Üí Servidor" if msg['from_client'] else "Servidor ‚Üí Cliente"
        msg_type = "Bin√°rio" if msg['is_binary'] else "Texto"
        timestamp = msg['timestamp'].strftime('%H:%M:%S.%f')[:-3]
        
        print(f"Mensagem #{i}:")
        print(f"  - Timestamp: {timestamp}")
        print(f"  - Dire√ß√£o: {direction}")
        print(f"  - Tipo: {msg_type}")
        print(f"  - Tamanho: {msg['size']} bytes")
        print(f"  - Conte√∫do: {msg['content']}")
        print()
    
    # Fecha primeira conex√£o
    print("=" * 70)
    print("üîå Fechando Conex√£o #1...")
    print("=" * 70)
    ws_history.close_connection(flow_id_1)
    conn_info = ws_history.get_connection_info(flow_id_1)
    print(f"‚úì Conex√£o fechada √†s {conn_info['end_time'].strftime('%H:%M:%S')}")
    print(f"  Status: {conn_info['status']}")
    print()
    
    # Resumo final
    print("=" * 70)
    print("‚úÖ Demo Conclu√≠da!")
    print("=" * 70)
    print()
    print("Esta demo ilustra como o InteceptProxy rastreia conex√µes WebSocket.")
    print("Na interface gr√°fica, voc√™ ver√°:")
    print("  ‚Ä¢ Lista de todas as conex√µes WebSocket")
    print("  ‚Ä¢ Mensagens em tempo real")
    print("  ‚Ä¢ Suporte para texto e dados bin√°rios")
    print("  ‚Ä¢ Hist√≥rico completo de comunica√ß√£o")
    print()
    print("Para usar:")
    print("  1. Inicie o InteceptProxy: python intercept_proxy.py")
    print("  2. Acesse a aba 'WebSocket üîå'")
    print("  3. Configure seu navegador/app para usar o proxy")
    print("  4. Estabele√ßa conex√µes WebSocket")
    print()


if __name__ == "__main__":
    try:
        demo_websocket_history()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Demo interrompida pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro durante a demo: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
